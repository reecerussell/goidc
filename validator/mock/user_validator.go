// Code generated by MockGen. DO NOT EDIT.
// Source: ../user_validator.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dal "github.com/reecerussell/goidc/dal"
	reflect "reflect"
)

// MockUserValidator is a mock of UserValidator interface.
type MockUserValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUserValidatorMockRecorder
}

// MockUserValidatorMockRecorder is the mock recorder for MockUserValidator.
type MockUserValidatorMockRecorder struct {
	mock *MockUserValidator
}

// NewMockUserValidator creates a new mock instance.
func NewMockUserValidator(ctrl *gomock.Controller) *MockUserValidator {
	mock := &MockUserValidator{ctrl: ctrl}
	mock.recorder = &MockUserValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserValidator) EXPECT() *MockUserValidatorMockRecorder {
	return m.recorder
}

// ValidatePassword mocks base method.
func (m *MockUserValidator) ValidatePassword(u *dal.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", u, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockUserValidatorMockRecorder) ValidatePassword(u, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockUserValidator)(nil).ValidatePassword), u, password)
}
